"use strict";(self.webpackChunkdocs_sibisaravanan_com=self.webpackChunkdocs_sibisaravanan_com||[]).push([[5894],{6042:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"monitoring-linux-servers-using-prometheus-and-grafana","metadata":{"permalink":"/blog/monitoring-linux-servers-using-prometheus-and-grafana","editUrl":"https://github.com/sibisaravanan/sibisaravanan-docs/tree/main/blog/blog/2021-10-19-prometheus-grafanna-stack/index.md","source":"@site/blog/2021-10-19-prometheus-grafanna-stack/index.md","title":"Monitoring Linux Servers Using Prometheus and Grafana","description":"What is Prometheus?","date":"2021-10-19T00:00:00.000Z","formattedDate":"October 19, 2021","tags":[{"label":"prometheus","permalink":"/blog/tags/prometheus"},{"label":"grafanna","permalink":"/blog/tags/grafanna"},{"label":"sre","permalink":"/blog/tags/sre"},{"label":"monitoring","permalink":"/blog/tags/monitoring"},{"label":"linux","permalink":"/blog/tags/linux"},{"label":"node exporter","permalink":"/blog/tags/node-exporter"},{"label":"observability","permalink":"/blog/tags/observability"}],"readingTime":5.115,"hasTruncateMarker":false,"authors":[{"name":"Sibi saravanan","title":"Senior Devops Engineer","url":"https://github.com/sibisaravanan","imageURL":"https://avatars.githubusercontent.com/u/33645338","key":"sibisaravanan"}],"frontMatter":{"slug":"monitoring-linux-servers-using-prometheus-and-grafana","title":"Monitoring Linux Servers Using Prometheus and Grafana","authors":["sibisaravanan"],"tags":["prometheus","grafanna","sre","monitoring","linux","node exporter","observability"]},"unlisted":false,"nextItem":{"title":"AWS Single Sign-on (SSO)","permalink":"/blog/aws-single-sign-on-sso"}},"content":"## What is Prometheus?\\n\\n[Prometheus](http://prometheus.io/) is an open-source tool for monitoring and alerting purposes. It was initially developed in 2012 and is a popular tool in the tech industry even today. This standalone and open-source tool does not belong to any company but is maintained independently as a part of the Cloud Native Computing Foundation since 2016. It makes use of a special type of flexible querying language called the PromQL and fetches metrics from servers and maintains them as time-series data. It also utilizes special purpose libraries and exporters for collecting metrics from third-party systems.\\n\\n## What is Grafana?\\n\\n[Grafana](http://www.grafana.com/) is an open-source visualization and analytics software. It turns your time series database data into visually appealing amazing dashboards and graphs. The data is usually provided by other metrics collecting and storing tools, in our case the time series data will be fed by Prometheus. It also allows us to create alerts for multiple thresholds and send alert notifications on the configured notifications channel.\\n\\n## Let\'s get started with the monitoring setup:\\n\\nWe will be using docker containers for setting up Prometheus and Grafana. In addition, we would be running an Nginx container for the reverse proxy to route traffic internally.\\n\\n![simple-architecture](simple-architecture.png)\\n\\nLet\'s first understand the overview of the structure. For this blog, we will be deploying this stack on AWS and will be monitoring the servers in the account.\\n\\n## Monitoring EC2 servers on AWS:\\n\\nFor the context of this blog, we will be monitoring _EC2 instances_ on _AWS_. But this is not limited to AWS and can be implemented on other cloud platforms and on-premise as well.\\n\\nWe will have one instance server as a host and we will call it the _Master node_. This node will be having the _Prometheus_, _Grafana_, and _Nginx_ containers running on docker. We will be using one of the exporters of Prometheus called the [node-exporter](https://github.com/prometheus/node_exporter) to scrape metrics from the target nodes. This exporter will be installed on all target nodes that we plan on monitoring and collecting metrics from.\\n\\n## Architecture:\\n\\n![full-architecture.png](full-architecture.png)\\n\\nReferring to the architecture above, the target nodes that have node-exporter installed on them will send the metrics to Prometheus, from which the Grafana will collect the data and visualize it.\\n\\nLet\'s start the initial setup from scratch,\\n\\nCreate a new folder with a name of your choice, We will call it _monitoring_.\\n\\nThe folder tree structure will look something like this,\\n\\n![file-tree.png](file-tree.png)\\n\\nCreate the respective _files_ and _folders_ as above.\\n\\nFile 1: This folder will be the root directory.\\n\\nFile 2: `docker-compose.yaml` This docker-compose file will be used to spin up the different containers.\\n\\n#### Sample\\n\\n```yaml\\nversion: \\"3.3\\"\\nservices:\\n  nginx:\\n    image: nginx:1.19.4\\n    user: \u201c0\u201d\\n    container_name: nginx\\n    volumes:\\n      - ./nginx/config:/etc/nginx/conf.d\\n      - ./nginx/data:/usr/share/nginx/html\\n      - ./nginx/logs:/var/log/nginx\\n    ports:\\n      - \u201c80:80\u201d\\n    restart: on-failure\\n    networks:\\n      - my-network\\n  prometheus:\\n    image: prom/prometheus:v2.22.0\\n    user: \u201c0\u201d\\n    container_name: prometheus\\n    volumes:\\n      - ./prometheus/config:/etc/prometheus\\n      - ./prometheus/data:/prometheus\\n    ports:\\n      - \u201c9090:9090\u201d\\n    restart: on-failure\\n    networks:\\n      - my-network\\n  grafana:\\n    image: grafana/grafana:7.3.1\\n    user: \u201c0\u201d\\n    container_name: grafana\\n    volumes:\\n      - ./grafana/config:/etc/grafana\\n      - ./grafana/data:/var/lib/grafana\\n      - ./grafana/provisioning:/etc/grafana/provisioning\\n    ports:\\n      - \u201c3000:3000\u201d\\n    restart: on-failure\\n    networks:\\n      - my-network\\nnetworks:\\n  my-network:\\n    driver: bridge\\n    name: my-network\\n```\\n\\nFile 5: This is the config file for Grafana. A complete guide can be found here.\\n\\nFile 9: `dashboard.yaml`\\n\\nThis [file](https://grafana.com/docs/grafana/latest/administration/provisioning/#dashboards) contains information about the dashboard.\\n\\n#### Sample:\\n\\n```yaml\\napiVersion: 1\\nproviders:\\n  - name: \\"monitoring-dashboard\\"\\norgId: 1\\nfolder: \\"\\"\\ntype: file\\ndisableDeletion: true\\neditable: true\\noptions:\\npath: /etc/grafana/provisioning/dashboards\\n```\\n\\nFile 10: JSON template of the visual dashboard.\\n\\nDashboards can be either created in the UI and exported as JSON templates or can be imported into the UI through a [JSON template](https://grafana.com/docs/grafana/latest/dashboards/json-model/).\\n\\nFile 12: `datasource.yaml`\\n\\nThis [file](https://grafana.com/docs/grafana/latest/administration/provisioning/#example-data-source-config-file) contains information about the data source, which will be Prometheus in our case.\\n\\nFile 14: `notifiers.yaml`\\n\\nThis [file](https://grafana.com/docs/grafana/latest/administration/provisioning/#alert-notification-channels) contains information about the notification channels that are used for sending alerts.\\n\\n#### Sample:\\n\\n```yaml\\nnotifiers:\\n  - name:\\ntype: email\\norg_id: 1\\nuid: notifier1\\nis_default: true\\nsettings:\\naddresses: email@email.com\\n```\\n\\nFile 17: `prometheus.yaml`\\n\\nThis [file](https://prometheus.io/docs/prometheus/latest/configuration/configuration/) contains the list of all target nodes and their IP addresses from which it has to collect metrics.\\n\\n#### Sample:\\n\\n```yaml\\nglobal:\\nscrape_interval: 15s\\nscrape_configs:\\n- job_name: \'\'\\nscrape_interval: 5s\\nstatic_configs:\\n- targets: [\'\']\\n```\\n\\nFile 21: `nginx.conf`\\n\\nThis is the [configuration file](https://docs.nginx.com/nginx/admin-guide/web-server/reverse-proxy/) of Nginx which listens to external traffic and does reverse proxy.\\n\\n#### Sample:\\n\\n```conf\\nupstream @prometheus {\\n    server prometheus:9090;\\n}\\n\\nupstream @grafana {\\n    server grafana:3000;\\n}\\n\\nserver{\\n    listen 80;\\n    server_name domain.com;\\n    root /usr/share/nginx/html;\\n\\n    location /grafana/ {\\n        rewrite ^/grafana/(.*)$ /$1 break;\\n        proxy_set_header X-Real-IP $remote_addr;\\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\\n        proxy_set_header X-NginX-Proxy true;\\n        proxy_ssl_session_reuse off;\\n        proxy_set_header Host $http_host;\\n        proxy_cache_bypass $http_upgrade;\\n        proxy_redirect off;\\n        proxy_pass http://@grafana;\\n    }\\n\\n    location /prometheus/ {\\n        # rewrite ^/prometheus/?$ /prometheus/graph redirect;\\n        # rewrite ^/prometheus/(.*)$ /$1 break;\\n        proxy_set_header X-Real-IP $remote_addr;\\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\\n        proxy_set_header X-NginX-Proxy true;\\n        proxy_ssl_session_reuse off;\\n        proxy_set_header Host $http_host;\\n        proxy_cache_bypass $http_upgrade;\\n        proxy_redirect off;\\n        proxy_pass http://@prometheus/;\\n    }\\n}\\n```\\n\\n## Running the containers:\\n\\nInside the monitoring directory, where the docker-compose file is present, we can run the containers by using this command `sudo docker-compose up -d` This will spin up the three containers and map them to the specified ports.\\n\\n## Installing node-exporter on target nodes:\\n\\nThe node exporter should be installed on all the target nodes that would need to be monitored and make sure their IP addresses are entered correctly in the configuration file of Prometheus in point 17. Installation of the exporter can be done by following the steps in this [document](https://docs.vmware.com/en/Management-Packs-for-vRealize-Operations-Manager/1.5.2/kubernetes-solution/GUID-A1B68BE5-EF38-48E1-AA80-FD71E6F19989.html).\\n\\nSince the containers are up and running, we can view the\\n\\n`Grafana at:3000`\\n`Prometheus at:9090`\\n\\nBut with Nginx reverse proxy setup we map a domain with the master node using the `nginx.conf` file and a _DNS record_ to point the domain to the master node.\\n\\nAfter _mapping, the domain_ and _proxy_pass_ rules are written in the `nginx.conf` file, We can reach `Grafana`, and `Prometheus` through custom routes.\\n\\n`domain.com/grafana`\\n\\nand\\n\\n`domain.com/prometheus`\\n\\n## Reference images:\\n\\n### Prometheus page:\\n\\n![prometheus-sample-page.png](prometheus-sample-page.png)\\n\\n### Grafana page:\\n\\n![grafana-sample.png](grafana-sample.png)\\n\\n## Conclusion:\\n\\nThese open-source tools are easy to use and less complex compared to other monitoring tools available. With community support and additional free plugins and packages, it can be integrated with additional features as well. All in all, Prometheus and Grafana can be the top tools to consider for monitoring Linux servers."},{"id":"aws-single-sign-on-sso","metadata":{"permalink":"/blog/aws-single-sign-on-sso","editUrl":"https://github.com/sibisaravanan/sibisaravanan-docs/tree/main/blog/blog/2020-11-18-aws-sso/index.md","source":"@site/blog/2020-11-18-aws-sso/index.md","title":"AWS Single Sign-on (SSO)","description":"aws-sso-workflow","date":"2020-11-18T00:00:00.000Z","formattedDate":"November 18, 2020","tags":[{"label":"AWS","permalink":"/blog/tags/aws"},{"label":"AWS SSO","permalink":"/blog/tags/aws-sso"},{"label":"Cloud","permalink":"/blog/tags/cloud"},{"label":"SSO","permalink":"/blog/tags/sso"}],"readingTime":6.595,"hasTruncateMarker":false,"authors":[{"name":"Sibi saravanan","title":"Senior Devops Engineer","url":"https://github.com/sibisaravanan","imageURL":"https://avatars.githubusercontent.com/u/33645338","key":"sibisaravanan"}],"frontMatter":{"slug":"aws-single-sign-on-sso","title":"AWS Single Sign-on (SSO)","authors":["sibisaravanan"],"tags":["AWS","AWS SSO","Cloud","SSO"]},"unlisted":false,"prevItem":{"title":"Monitoring Linux Servers Using Prometheus and Grafana","permalink":"/blog/monitoring-linux-servers-using-prometheus-and-grafana"}},"content":"![aws-sso-workflow](./aws-sso-workflow.avif)\\n\\n## Hassle-free access management with AWS Single Sign-on (SSO)\\n\\n### Introduction\\n\\nAWS Single Sign-on is a single sign-on access providing service by Amazon web Services. AWS SSO allows you to access multiple AWS accounts and other Business applications just with a single access credential having them centrally managed. One of the painful processes is having to maintain several different access credentials and remembering which key is for which service. And this is where AWS SSO comes into the picture. How nice and convenient would it be if we could open multiple locked doors with the same key, eliminating the hassle of maintaining a bunch of different keys? Let\u2019s deep dive and look into more interesting things you could do with the AWS SSO service.\\n\\n### Let\u2019s get started\\n\\nYou can access AWS SSO right from the [AWS Management Console](https://us-east-1.signin.aws.amazon.com/oauth?response_type=code&client_id=arn%3Aaws%3Aiam%3A%3A015428540659%3Auser%2Fhomepage&redirect_uri=https%3A%2F%2Fconsole.aws.amazon.com%2Fconsole%2Fhome%3Fnc2%3Dh_ct%26src%3Dheader-signin%26state%3DhashArgs%2523%26isauthcode%3Dtrue&forceMobileLayout=0&forceMobileApp=0&code_challenge=DNJywQV_kbc352eXdBUUtFCq6xlBx1YeYX737H8RkbY&code_challenge_method=SHA-256). The AWS Organisation Administrator can configure permissions and access controls for all the AWS accounts and users centrally without any complexity. Since all this work can be done in a single dashboard-like user portal, it eliminates the work of setting up the configurations manually on each account.\\n\\n### Creating and managing user identities in AWS SSO\\n\\nThe AWS Organization Administrator can create new identities for individual users and even user groups within the AWS SSO user portal and manage them centrally all in one place. The AWS SSO also provides the facility of connecting existing user identities from third-party external user directories with the AWS SSO user directory. They include\\n\\n- Microsoft Active Directory\\n- Okta Universal Directory\\n- Azure AD\\n\\nAnd many more supported identity providers. [Click here to learn more](https://docs.aws.amazon.com/singlesignon/latest/userguide/supported-idps.html). You can also automate this process of granting users and user groups permissions by using *API*s and _AWS Cloudformation_ service.\\n\\n### Auto-sync identities from other directories\\n\\nAfter integrating user identities from any of the external directories mentioned above, user identities are automatically synchronized from those directories. This means whenever new identities are created or changes are made to the existing identities, it automatically gets reflected in the AWS SSO dashboard, eliminating the need for manual periodic synchronizations.\\n\\n### Built-in integrations for other business applications\\n\\nAWS SSO not only allows us to grant access to AWS accounts and services but also supports other business applications. To mention a few popular ones,\\n\\n- Atlassian\\n- Dropbox\\n- Github\\n- G Suite\\n- Office365\\n- Salesforce\\n- Slack\\n\\nMany more pre-integrated applications can be found here. [Click to view](https://docs.aws.amazon.com/singlesignon/latest/userguide/saasapps.html#saasapps-supported).\\n\\n### Steps to setup AWS SSO in the Management Console\\n\\n#### Step 1: Enable AWS SSO\\n\\n- Log in to your [AWS Management Console](https://us-east-1.signin.aws.amazon.com/oauth?response_type=code&client_id=arn%3Aaws%3Aiam%3A%3A015428540659%3Auser%2Fhomepage&redirect_uri=https%3A%2F%2Fconsole.aws.amazon.com%2Fconsole%2Fhome%3Fnc2%3Dh_ct%26src%3Dheader-signin%26state%3DhashArgs%2523%26isauthcode%3Dtrue&forceMobileLayout=0&forceMobileApp=0&code_challenge=DNJywQV_kbc352eXdBUUtFCq6xlBx1YeYX737H8RkbY&code_challenge_method=SHA-256) on your favourite browser.\\n- Search for AWS Single sign-on in AWS Services.\\n- Make sure you have an AWS Organization setup. If not, click _\u201cCreate AWS Organization\u201d_ to set one up.\\n- After setting up an organization, Click _\u201cEnable AWS SSO\u201d_ as shown below.\\n\\n![step-1.png](step-1.png)\\n\\n#### Step 2: Select the source of Identity\\n\\nThe AWS SSO store holds the identities of the users that are needed to be given access. You are also given the option to choose from the list of [supported external identity providers](https://docs.aws.amazon.com/singlesignon/latest/userguide/supported-idps.html) as the source of identity. As discussed earlier the AWS SSO also provides automatic synchronization of users from those external sources as well.\\n\\n![step-2.png](step-2.png)\\n\\nAfter adding users, they appear as a list of authenticated users. Now you can assign specific permissions to each user individually or put together a bunch of users as a user group and assign permissions to that group.\\n\\nHere is a guide for setting up a few popular external identities:\\n\\n- _AWS SSO Store_ - [managing user identities in default AWS SSO store](https://docs.aws.amazon.com/singlesignon/latest/userguide/manage-your-identity-source-sso.html).\\n- _Microsoft AD Directory_ \u2014 [Connect your Microsoft AD Directory with AWS SSO](https://docs.aws.amazon.com/singlesignon/latest/userguide/manage-your-identity-source-ad.html).\\n- _OKTA Directory_ \u2014 [Connecting with OKTA user directory](https://docs.aws.amazon.com/singlesignon/latest/userguide/okta-idp.html#okta-step2).\\n\\n#### Step 3: Assigning SSO access to AWS Accounts and Applications\\n\\nThe AWS SSO provides authorized users with personalized _user portal_ access to several _AWS Accounts_ or _Applications_, using their credentials that were set up in AWS SSO.\\n\\n##### AWS Accounts:\\n\\n1. Inside the [AWS SSO](https://console.aws.amazon.com/singlesignon) console, Click on AWS Accounts.\\n2. Click _\u201cAssign users\u201d_ to add a list of users to specific AWS accounts that they can access using their AWS SSO credentials.\\n3. Create permissions set in the permissions tab. A [permission set](https://docs.aws.amazon.com/singlesignon/latest/userguide/permissionsetsconcept.html) is a set of permissions that can be assigned to _users or groups_.\\n\\n##### AWS Applications:\\n\\n1. In the [AWS SSO](https://console.aws.amazon.com/singlesignon) console, choose _Applications_ in the left navigation pane.\\n\\n2. Select your desired application in the list.\\n\\n3. Choose Actions, and then choose either Disable or Enable.\\n\\n##### Other Business Applications:\\n\\nThe AWS SSO not only works with AWS Applications but also with other business\u2019 cloud applications. A detailed guide for setting up AWS SSO credentials for those applications from other businesses can be found here. [Click to learn more](https://docs.aws.amazon.com/singlesignon/latest/userguide/saasapps.html#saasapps-addconfigapp).\\n\\n### AWS SSO + IAM\\n\\nWhen getting started with AWS, we start by creating an AWS Account. In that account, we first create an organization, and under that organization, we create one or more AWS user accounts. There is not much to worry about when there is just you and a friend, but in the case of a company, you will have many employees to be given access to AWS. So, you create IAM roles and permissions for several users and group them based on their type of job or department, etc. At the end of the day, you end up with many IAM roles and permissions for every single account added to the organization. It can indeed get complicated in handling the users and the IAM configuration. That\u2019s one of the main reasons for AWS to come up with AWS SSO.\\n\\nAWS SSO eliminates the work of managing users with IAM permissions by giving access to the users to handle their accounts. In SSO, all you have to do is to add the user to the AWS SSO directory and assign to them the required permissions. Then the users can log in to their accounts through the SSO user portal without any hassle.\\n\\nFrom a security standpoint, when you have to assign IAM permissions to a user, you have to go to the specific user and alter their permissions or roles. When a user has to access something from another account, which is typically called cross-account access, the administrator has to give access permission to every AWS account. As long as it goes smoothly we don\u2019t have a problem. The security of the sensitive components in the cloud is at stake when excessive permissions are assigned to undesignated personnel in the company. But in the case of AWS SSO, you can manage the users in groups all in one place and can be confident that the right person has the right access permissions without having to worry about things going wrong. Dealing with each user individually and assigning IAM permissions is what stands out in the case of SSO.\\n\\nLet\u2019s imagine a case where we have a user called Chloe. Now Chloe has access to her account \u2018X\u2019. She wants to access an S3 bucket that resides in another account, say \u2018Y\u2019. Now she has to assume a role that was assigned to her, which grants access to S3 service alone from her account \u2018X\u2019 and access the bucket in account \u2018Y\u2019. This role gives temporary credentials to Chloe with which she can access the S3 bucket in account \u2018Y\u2019. This is the main source of the pain because the administrator needs to deploy and manage many policies and roles across the AWS accounts.\\n\\n### Conclusion\\n\\nThe SSO eliminates all these knick-knacks-looking jobs of configuring IAM access to users and makes it easy to handle user access management all in one place. It also eliminates the fear of security breaches from misconfigured IAM permissions and roles and the combination of AWS SSO and IAM just makes life easier in the world of AWS user management."}]}')}}]);